package blockchain;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class ChainBlockAddition {

    private Chain chain;

    @Before
    public void setupChain() {
        chain = new Chain(Utils.hexStringToByteArray(""));
    }

    @Test
    public void shouldAddValidSuccessorBlock() {
        Block block = new Block(Utils.hexStringToByteArray("00000000000000140000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de0000c97e9af81bd127e5d5f8fe8e99be1356e74734a005d1681550429c4acb36b3b37dba16f5f196000001678f1233c
        chain.addBlock(block);
        Block lastBlock = chain.getBlocks().get(chain.length() - 1);
        Assert.assertTrue("Last Block should be: " + block + " but is: " + lastBlock, lastBlock.equals(block));
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldNotAddValidSuccessorBlockWithMoreThanOneRewardTransaction() {
        Block block = new Block(Utils.hexStringToByteArray("00000000000000140000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de0000b627fca1d40f110ab9efdde60520e90f6478f335a3c39df12906fc6e3fc2675f5faac248f7460000016794fdbd67000400020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        chain.addBlock(block);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldNotAddInvalidBlock() {
        Block block = new Block(Utils.hexStringToByteArray("00000000000000140000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de00000000000000000000000000000000000000000000000000000000000000000000000000000000000001678f1233c10004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        chain.addBlock(block);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldNotAddValidPreviousInChainBlock() {
        Block block = new Block(Utils.hexStringToByteArray("00000000000000030000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de0000fbffb78e498b0de78b9583e31b4b14c280535d1004cb3338a9220b4ff08dc8ba421352538b8b000001678f1ee63f
        chain.addBlock(block);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldNotAddValidNoneSuccessorBlock() {
        Block block = new Block(Utils.hexStringToByteArray("000000000000003e0000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de0000303866d6b42c5fddf06e6f1ede5caa5b72a7c41759086b21cb92894305d9f3bdaa44a72a0b17000001678f1ee6bb
        chain.addBlock(block);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldNotAddValidOtherDifficultySuccessorBlock() {
        Block block = new Block(Utils.hexStringToByteArray("00000000000000140000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de00000e42a661b300d4a042125d8e11ba9c435a8dde83817c05459be99e469f35742e5394426920e2000001678f1ee6e
        chain.addBlock(block);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldNotAddValidButTransactionCannotBeExecutedBAmountTooHighlock() {
        Block block = new Block(Utils.hexStringToByteArray("00000000000000140000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de0000a1c0f42e245caa9611781be37cdb5a5d24230c86c88aad6bf0e491bffdacb7b931c0f184ae14000001678f2b63c800040001234edab5679b6b90f8fe93911d55effda48066f2da84f59b14ae609f381482000b50389102e0069b8b0c69442f14b8e4778663e846118bb768d973630b8a4842000000000000002a
        chain.addBlock(block);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldNotAddValidButTransactionCannotBeExecutedRewardToHighBlock() {
        Block block = new Block(Utils.hexStringToByteArray("00000000000000140000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de00003a140e3a45b4aaed5091cb92f23abe295f1ac17213dcf8197304059bf89406f3087c1e182bd5000001678f2e1eb60004000100000000000000000000000000000000000000000000000000000000000000000b50389102e0069b8b0c69442f14b8e4778663e846118bb768d973630b8a
        chain.addBlock(block);
    }

    @Test(expected = IllegalArgumentException.class)
    public void shouldNotAddValidButTransactionCannotBeExecutedRewardToLowBlock() {
        Block block = new Block(Utils.hexStringToByteArray("00000000000000140000ef75f297c3370617fb9268528a417d966eb2c9b261b17dea5361247c00de000091648e947352b5ac9af47c9d3a0388d86360d2efe26eec944cdeda487a2e1d757a7f1dd99652000001678f2ed4b80004000100000000000000000000000000000000000000000000000000000000000000000b50389102e0069b8b0c69442f14b8e4778663e846118bb768d973630b8a484200000000000003e
        chain.addBlock(block);
    }
}
